syntax = "proto3";

package realworld.v1;

import "google/api/annotations.proto";

option go_package = "kratos-realworld/api/realworld/v1;v1";

// The greeting service definition.
service Realworld {
  // Sends a greeting
  rpc Login (LoginRequest) returns (UserReply)  {
        option (google.api.http) = {
            post: "/api/users/login",
            body: "*",
        };
  }

  rpc Register (RegisterRequest) returns (UserReply)  {
        option (google.api.http) = {
            post: "/api/users",
            body: "*",
        };
  }
  rpc GetCurrentUser (GetCurrentUserRequest) returns (UserReply)  {
        option (google.api.http) = {
            get: "/api/user",
        };
  }
  rpc UpdateUser (UpdateUserRequest) returns (UserReply)  {
        option (google.api.http) = {
            put: "/api/user",
            body: "*",
        };
  }
  rpc GetProfile (GetProfileRequest) returns (ProfileReply)  {
        option (google.api.http) = {
            get: "/api/profiles/{username}",
        };
  }
  rpc FollowUser (FollowUserRequest) returns (ProfileReply)  {
        option (google.api.http) = {
            post: "/api/profiles/{username}/follow",
            body: "*"
        };
  }
  rpc UnFollowUser (UnfollowUserRequest) returns (ProfileReply)  {
        option (google.api.http) = {
            delete: "/api/profiles/{username}/follow",
        };
  }
  rpc ListArticles (ListArticlesRequest) returns (MultipleArticlesReply)  {
        option (google.api.http) = {
            get: "/api/articles",
        };
  }
  rpc FeedArticles (FeedArticlesRequest) returns (MultipleArticlesReply)  {
        option (google.api.http) = {
            get: "/api/articles/feed",
        };
  }
  rpc GetArticle (GetArticleRequest) returns (SingleArticleReply)  {
        option (google.api.http) = {
            get: "/api/articles/{slug}",
        };
  }
  rpc CreateArticle (CreateArticleRequest) returns (SingleArticleReply)  {
        option (google.api.http) = {
            post: "/api/articles",
            body: "*"
        };
  }
  rpc UpdateArticle (UpdateArticleRequest) returns (SingleArticleReply)  {
        option (google.api.http) = {
            put: "/api/articles/{slug}",
            body: "*"
        };
  }
  rpc DeleteArticle (DeleteArticleRequest) returns (SingleArticleReply)  {
        option (google.api.http) = {
            delete: "/api/articles/{slug}",
        };
  }

  rpc AddCommentsToAnArticle (AddCommentsToanArticleRequest) returns (SingleCommentReply)  {
        option (google.api.http) = {
            post: "/api/articles/{slug}/comments",
            body: "*"
        };
  }

  rpc GetCommentsFromAnArticle (GetCommentsFromanArticleRequest) returns (MultipleCommentsReply)  {
        option (google.api.http) = {
            post: "/api/articles/{slug}/comments",
            body: "*"
        };
  }

  rpc DeleteComment (DeleteCommentRequest) returns (MultipleCommentsReply)  {
        option (google.api.http) = {
            delete: "/api/articles/{slug}/comments/{id}",
        };
  }

  rpc FavoriteArticle (FavoriteArticleRequest) returns (SingleArticleReply)  {
        option (google.api.http) = {
            post: "/api/articles/{slug}/favorite",
            body: "*"
        };
  }

  rpc UnFavoriteArticle (UnfavoriteArticleRequest) returns (SingleArticleReply)  {
        option (google.api.http) = {
            delete: "/api/articles/{slug}/favorite",
        };
  }

  rpc GetTags (GetTagsRequest) returns (ListOfTagsReply)  {
        option (google.api.http) = {
            get: "/api/tags",
        };
  }
}

message GetTagsRequest {}

message UnfavoriteArticleRequest {
    string slug = 1;
    message User {
        string email = 1;
        string password = 2;
  }

  User user = 2;
}

message FavoriteArticleRequest {
    string slug = 1;
    message User {
        string email = 1;
        string password = 2;
  }

  User user = 2;
}

message DeleteCommentRequest {
    string slug = 1;
    uint64 id = 2;
    message User {
        string email = 1;
        string password = 2;
  }

  User user = 3;
}

message GetCommentsFromanArticleRequest {
    string slug = 1;
    message User {
        string email = 1;
        string password = 2;
  }

  User user = 2;
}

message AddCommentsToanArticleRequest {
    string slug = 1;
    message Comment {
        string body = 1;
    }
    Comment comment = 2;
}

message DeleteArticleRequest {
    string slug = 1;
    message User {
        string email = 1;
        string password = 2;
  }

  User user = 2;
}

message UpdateArticleRequest {
    string slug = 1;
    message Article {
        string title = 1;
        string description = 2;
        string body = 3;
    }
    Article article = 2;
}

message CreateArticleRequest{
    string title = 1;
    string description = 2;
    string body = 3;
    repeated string tagList = 4;
}

message GetArticleRequest {
    string slug = 1;
}

message FeedArticlesRequest {
    int64 limit = 1;
    int64 offset = 2;
}

message ListArticlesRequest {
    string tag = 1;
    string author = 2;
    string favorited = 3;
    int64 limit = 4;
    int64 offset = 5;
}

message UnfollowUserRequest {
    string username = 1;
}

message FollowUserRequest {
    string username = 1;
}

message GetProfileRequest {
    string username = 1;
}

message UpdateUserRequest {
    message User {
        string email = 1;
        string bio = 2;
        string image = 3;
        string username = 4;
        string password = 5;
    }

    User user = 1;
}

message GetCurrentUserRequest {}

message UserReply {
    message User {
        string email = 1;
        string token = 2;
        string username = 3;
        string bio = 4;
        string image = 5;
    }
    User user = 1;
}

message ProfileReply {
  string username = 1;
  string bio = 2;
  string image = 3;
  bool following = 4;
}

message SingleArticleReply {

    message Author {
        string username = 1;
        string bio = 2;
        string image = 3;
        bool following = 4;
    }

    message Article {
        string slug = 1;
        string title = 2;
        string description = 3;
        string body = 4;
        repeated string tagList = 5;
        string createdAt = 6;
        string updatedAt = 7;
        bool favorited = 8;
        uint64 favoritesCount = 9;
        Author author = 10;
    }

    Article article = 1;
}

message MultipleArticlesReply {

    message Author {
        string username = 1;
        string bio = 2;
        string image = 3;
        bool following = 4;
    }

    message Articles {
        string slug = 1;
        string title = 2;
        string description = 3;
        string body = 4;
        repeated string tagList = 5;
        string createdAt = 6;
        string updatedAt = 7;
        bool favorited = 8;
        uint64 favoritesCount = 9;
        Author author = 10;
    }

    repeated Articles articles = 1;
    uint64 articlesCount = 2;
}

message SingleCommentReply {

    message Author {
        string username = 1;
        string bio = 2;
        string image = 3;
        bool following = 4;
    }

    message Comment {
        uint64 id = 1;
        string createdAt = 2;
        string updatedAt = 3;
        string body = 4;
        Author author = 5;
    }

    Comment comment = 1;
}

message MultipleCommentsReply {

    message Author {
        string username = 1;
        string bio = 2;
        string image = 3;
        bool following = 4;
    }

    message Comments {
        uint64 id = 1;
        string createdAt = 2;
        string updatedAt = 3;
        string body = 4;
        Author author = 5;
    }

    Comments comments = 1;
}

message ListOfTagsReply {
    repeated string tags = 1;
}

message LoginRequest {

  message User {
    string email = 1;
    string password = 2;
  }

  User user = 1;
}

message RegisterRequest {

  message User {
    string username = 1;
    string email = 2;
    string password = 3;
  }

  User user = 1;
}

message RegisterReply {}